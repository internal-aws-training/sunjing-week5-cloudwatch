Parameters:
  LambdaMetricsAlarmName:
    Type: String
    Default: lambda-metrics-alarm
  CloudWatchMetricsNS:
    Type: String
    Default: MyCloudTrailMetrics
  CloudWatchMetricName:
    Type: String
    Default: lambda-metrics
  SNSEndpoint:
    Type: String
    Default: jing.sun@rea-group.com
  SNSTopicName:
    Type: String
    Default: LambdaBadLogAlarm
  CloudWatchDimensionName:
    Type: String
    Default: bad_log
  CloudWatchDimensionValue:
    Type: String
    Default: SoBad

Resources:
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code: ../lambda
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: "nodejs12.x"
      Timeout: 900
      Environment:
        Variables:
          CW_METRIC_NAMESPACE: !Ref CloudWatchMetricsNS
          CW_METRIC_NAME: !Ref CloudWatchMetricName
          CW_DIMENSION_NAME: !Ref CloudWatchDimensionName
          CW_DIMENSION_VALUE: !Ref CloudWatchDimensionValue

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com
      Policies:
        - PolicyName: lambda-policy-log
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - arn:aws:logs:*:*:log-group:/aws/lambda/*:*
        - PolicyName: lambda-cloudwatch
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: "*"

  AlarmSNSTopic:
    Properties:
      Subscription:
        - Endpoint: !Ref SNSEndpoint
          Protocol: email
      TopicName: !Ref SNSTopicName
    Type: AWS::SNS::Topic

  CloudWatchTriggerLambdaRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: "rate(1 minute)"
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt LambdaFunction.Arn
          Id: 1

  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt CloudWatchTriggerLambdaRule.Arn

  # period = 5min, sum data points in period
  # the EvaluationPeriods=1ä¸ª
  LambdaMetricsAlarm:
    Type: AWS::CloudWatch::Alarm
    DependsOn:
      - AlarmSNSTopic
    Properties:
      AlarmDescription: Lambda bad log alarm
      AlarmName: !Ref LambdaMetricsAlarmName
      AlarmActions:
        - !Ref AlarmSNSTopic
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Threshold: 5
      EvaluationPeriods: 1
      Statistic: Sum
      MetricName: !Ref CloudWatchMetricName
      Namespace: !Ref CloudWatchMetricsNS
      Period: 300
      Dimensions:
        -
          Name: bad_log
          Value: SoBad
